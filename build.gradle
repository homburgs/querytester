import java.text.SimpleDateFormat

plugins {
    id("java")
    id("org.jetbrains.intellij") version "1.9.0"
    id("org.jetbrains.changelog") version "1.3.1"
}

group = "com.hsofttec.intellij"
version = "${pluginVersion}"

sourceCompatibility = javaSourceVersion
targetCompatibility = javaTargetVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        authentication {
            basic(BasicAuthentication)
        }
        credentials {
            username ceyoniq_artifact_username
            password ceyoniq_artifact_password
        }
        url "https://artifact.nscale.eu/repository/nscale-java-advanced-connector"
    }
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.changelog'

intellij {
    pluginName = "QueryTester"
    version = "${ideaVersion}"
    updateSinceUntilBuild = false
    buildSearchableOptions.enabled = false
    downloadSources = false
    patchPluginXml {
        changeNotes.set(provider { changelog.getLatest().toHTML() })
    }
}

signPlugin {
    certificateChain = System.getenv("CERTIFICATE_CHAIN")
    privateKey = System.getenv("PRIVATE_KEY")
    password = System.getenv("PRIVATE_KEY_PASSWORD")
}

changelog {
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    headerParserRegex = ~/(\d+\.\d+\.\d+)/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Fixed", "Security"]
}

dependencies {
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'com.github.lgooddatepicker:LGoodDatePicker:11.2.1'
    implementation("com.ceyoniq.nscale.applicationlayer:al-advanced-connector:8.2.1100") {
        exclude group: "org.slf4j"
    }

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

// check for existing property
if (findProperty("jetbrains_marketplace_token_querytester")) {
    publishPlugin {
        token = "${jetbrains_marketplace_token_querytester}"
    }
}
